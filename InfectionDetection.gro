include gro

chemostat ( true );
set ( "chemostat_width", 500);
set ( "chemostat_height", 500 );

// Neural network parameters
// To complete

// Gro parameters
fp := fopen ( "output_response.csv", "w" );
detection := 0.15;
color_level := 1000;
number_inputs := 4;

environment:={0,0,0,0};
if number_inputs = 4 
	then environment={0,0,0,0} 
	else environment={0,0,0} 
end;



// Environmental model simulating the presence of infection factors or not
// 
// qs: AI-2 (quorum sensing); env_in = environment (QS for the programmed bacteria);
// toxins: virulence factor; sider: catabolic enzyme

env_in := signal(4, 0.1); //purple s_signal([kdiff := 4, kdeg := 0.1])
qs := signal(4, 0.1); //blue
sider := signal(4, 0.1); //yellow
toxins := signal(4, 0.1); //red



//Selection function to compare to urea range
fun comparative g r .
  if g-r[0]>0 & g-r[1]<0 
    then 1
    else 0
  end;


// Bacterial behavior model
//behavior:= {0,0,0,0};
behavior := 0;
fun data L .
  ( sumlist L ) / color_level;


// Detection function 
fun detect i .
  if i > detection
    then 1
    else 0
  end;

// Biological responses 

fun favorable fav_env .
  if fav_env=1
    then {emit_signal(env_in, 100), set("ecoli_growth_rate", 0.04)} 
    else {emit_signal(env_in, 100), set("ecoli_growth_rate", 0.01)} //emit_signal(env_in, 10), no need to differentiate the concentration, it is juste the increase in population that increases the QS and so passes the threshold
  end;


//Artificial neural network program
// Risk 0 : no fluorescence
// Risk 1 : gfp
// Risk 2 : cfp
// Risk 3 : yfP
// Risk 4 : rfp 

program ANN() :={
  s:=[e:=environment ,score:=0.0,c:=behavior];
  gfp:=0;
  rfp:=0;
  yfp:=0;
  cfp:=0;
  
  t:=0;
  rep:=0;
  count:=0;
  m1:=0;
  m2:=0;
  Y:={};
  movility:= [ num := 0, mean := 0, std := 0 ];

// No need to emit signals, we don't want the programmed bacteria to sense each other and there is no commensalism
// This is evaluated at each update of each cell
  true:{t:= t+dt,
        rep:= rep+dt,
        count:=count+dt,
        //set_signal(env_in,rand(500)-250,(rand(500)-250),1)
       }

// s.e[0]: bacterium detects favorable environment;   s.e[1]: bacterium detects AI-2;
// s.e[2]: bacterium detects siderophores;            s.e[3]: bacterium detects toxins;
//
// s.c[0]: no fluorescence;   s.c[1]: gfp;
// s.c[2]: cfp;               s.c[3]: yfp;    s.c[4]: rfp;

  rep >= 0.5 & number_inputs=4 :{ s.e[0]:=detect(get_signal(env_in)),
                  s.e[1]:=detect(get_signal(qs)),
                  s.e[2]:=detect(get_signal(sider)),
                  s.e[3]:=detect(get_signal(toxins)),
                  //s.c[0] :=relu((s.e[0]*w_1[0])+(s.e[1]*w_1[1])+(s.e[2]*w_1[2])+(s.e[3]*w_1[3])), // relu is natural here since if the sum is negative is corresponds to an absence of response, not a negative response
                  //s.c[1] :=relu((s.e[0]*w_2[0])+(s.e[1]*w_2[1])+(s.e[2]*w_2[2])+(s.e[3]*w_2[3])),
                  //s.c[2] :=relu((s.e[0]*w_3[0])+(s.e[1]*w_3[1])+(s.e[2]*w_3[2])+(s.e[3]*w_3[3])),
                  //s.c[3] :=relu((s.e[0]*w_4[0])+(s.e[1]*w_4[1])+(s.e[2]*w_4[2])+(s.e[3]*w_4[3])),
                  s.c := s.e[0]+s.e[1]+s.e[2]+s.e[3],
                  rep := 0
               }
  rep >= 0.5 & number_inputs=3 :{ s.e[0]:=detect(get_signal(env_in)),
                  s.e[1]:=detect(get_signal(qs)),
                  s.e[2]:=detect(get_signal(sider)),
                  s.c := s.e[0]+s.e[1]+s.e[2],
                  rep := 0
               }
  

  //daughter :  { fprint (fp, s.e,",",s.c,"\n" ) }

// Bacterial behavior table
  s.c=0 : {gfp:=0,
		cfp:=0,
		yfp:=0,
		rfp:=0}
  s.c=1 : {gfp:=color_level,
		cfp:=0,
		yfp:=0,
		rfp:=0}
  s.c=2 : {gfp:=0,
		cfp:=color_level,
		yfp:=0,
		rfp:=0}
  s.c=3 : {gfp:=0,
		cfp:=0,
		yfp:=color_level,
		rfp:=0}
  s.c=4 : {gfp:=0,
		cfp:=0,
		yfp:=0,
		rfp:=color_level}
  
  // Emitting qs signal for the programmed bacteria
  //emit_signal(env_in, 100);


  //selected  : {print(s.e," ",s.c," ",get_signal(env_in))} //To complete

// This will set a lot of signals coming from everywhere but juste one time at the beginning of the simulation
  foreach i in range 1200 do {
  //  set_signal(env_in,rand(500)-250,(rand(500)-250),1) //set_signal(signal_name, location_x, location_y, concentration)
	//set_signal(toxins,rand(500)-250,(rand(500)-250),5),
	//set_signal(sider,rand(500)-250,(rand(500)-250),5),
	//set_signal(qs,rand(500)-250,(rand(500)-250),5)
  }end; // To complete and refine the numbers especially the concentrations
};

program main() := {
  count:=0;
  total:=0;
  ntot:=0;
  risk0:=0;
  Y:={};
  risk3:= 0;
  B:={};
  risk2:= 0;
  R:={};
  risk4:= 0;
  G:={};
  risk1:= 0;
 
  true : { count := count + dt,
       	   total := total + dt
	 }

  total = dt : {ecoli ([x:=-100, y:=-100], program ANN()),
                ecoli ([x:=-100, y:=100], program ANN()),
                ecoli ([x:=100, y:=-100], program ANN()),
                ecoli ([x:=100, y:=100], program ANN())}
  
  count >= 1 : {G:= maptocells gfp end,
       	         risk1 := data G ,
		 B:= maptocells cfp end,
       	         risk2 := data B ,
		 Y:= maptocells yfp end,
       	         risk3 := data Y , 
		 R:= maptocells rfp end,
       	         risk4 := data R ,
		 
		 ntot := length(G),
		 risk0 := ntot - risk1 - risk2 - risk3 - risk4,
			 print("nbcells = ",ntot,", risk0 = ",risk0,", risk1 = ",risk1,", risk2 = ",risk2,", risk3 = ",risk3,", risk4 = ",risk4),
	         fprint (fp,ntot,",",risk0,",",risk1,",",risk2,",",risk3,",",risk4,"\n" ),
		 count:=0
	       }

  total = 0 :{print("Current environment : Not Favorable ")}
  
  total<100:{
		//set_signal(env_in,rand(500)-250,rand(500)-250, 5) 
    favorable 0
	}
  
  total >=100 & total < 100.02 :{print("Current environment : Favorable ")}

  total>100 & total<200:{
		//set_signal(env_in,rand(500)-250,rand(500)-250, 5) 
    favorable 1
	}

  total >= 125 & total < 125.02:{print("Current environment : Favorable and AI-2 ")}

  total>125 & total<200:{
		set_signal(qs,rand(500)-250,rand(500)-250, 5) 
	}

  total >= 150 & total < 150.02 :{print("Current environment : Favorable, AI-2 and siderophores ")}

  total>150 & total<200:{
		set_signal(sider,rand(500)-250,(rand(500)-250),5) 
	}
  
  number_inputs=4 & total >= 175 & total < 175.02 :{print("Current environment : Favorable, AI-2, siderophores and toxins ")}

  number_inputs=4 & total>175 & total<200:{
		set_signal(toxins,rand(500)-250,(rand(500)-250),5) 
	}

  total >= 200 & total < 200.02:{print("Current environment : Not Favorable")}

  total>200:{
		favorable 0
	}

};

