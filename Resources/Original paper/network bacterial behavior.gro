/////////////////////////////////////////////////////////////
// 
//                       B A N N
// 
//   Bacterial Artificial Neural Network (11.04.2021)
//
//   Perceptron was trained to regulate the expression of
//   four types of cellular response: aerobic response, 
//   bacterial motility, commensalism and the stress response 
//
//         A. Gargantilla Becerra , R. Lahoz-Beltra
//                                                          
//   THIS SCRIPT IS PROVIDED BY THE AUTHOR "AS IS" AND      
//   CAN BE USED BY ANYONE FOR THE PURPOSES OF EDUCATION    
//   AND RESEARCH.  
//
/////////////////////////////////////////////////////////////
include gro

// Neural network parameters

w_1:={0.1,0.6,0.1,0.2};
w_2:={0.6,0.1,0.1,-0.3};
w_3:={0.1,0.1,0.6,-0.3};
w_4:={0.6,0.6,0.6,-1.3};
threshold:=0.5;

// gro parameters
environment:={0,0,0,0};
fp := fopen ( "output_response.csv", "w" );
detection :=0.15;

// Environmental model simulating the environment in which
// bacterial growth takes place in the experiments. Note how, 
// depending on environmental signals, a bacterium can exhibit 
// three kinds of metabolism: normal, commensal and aerobic energetic metabolism.
// 
// bio: default carbon source; 
// f: arabinose (food); f_c: commensalism carbon source;
// d: galactose (chemotactic signal); bac: AI-2 (quorum sensing);
// com: signal of the catabolism of commensalism; oxy: oxygen;
// response: aerobic catabolism; e: catabolic enzyme
//
bio := signal(0, 0.0); 
f := signal(4, 0.4);
f_c := signal(4, 0.4);
d := signal(4, 0.1);
bac := signal(4, 0.1);
com := signal(4, 0.1);
oxy := signal(10, 0.1); 
response:=signal(4,0.1);
e := signal(4,0.1);
//
// e + bio --> f: enzyme + carbon source --> arabinose;
// bac + com --> f_c: AI-2 + commensalism signal --> commensalism carbon source
//
reaction( {e,bio},{f},1);
reaction( {com,bac},{f_c},1);
reaction( {response,oxy},{},0.2);


// Bacterial behavior model
behavior:= {0,0,0,0};
fun data L .
  let n := length(L), mu := ( sumlist L ) / n in
    [
      num := n ,
      mean := mu ,
      std := sqrt ( sumlist ( map ( \ x . (x-mu)^2 ) L ) / n )
    ]
  end;

//Transfer function
fun relu i .
  if i > threshold
    then 1
    else 0
  end;

//Behavioral function
fun network g f .
  if g = 1
    then f
    else 0
  end;

//Transfer function 
fun detect i .
  if i > detection
    then 1
    else 0
  end;

// Biological responses

// Chemotaxis: the cell moves in the direction of a distant signal
// in order to colonize a possible new ecological niche.
fun colonization m1 m2 .
  if m2 < m1
    then {run(0), tumble(600)}
    else {run(60), tumble(0)}
  end;

// Aerobic adaptation: Bacteria emit a signal proportional to the
// oxygen concentration in the medium. This signal uses the oxygen 
// present for metabolic purposes. 
fun diferentiation ox .
  if ox > 0.15
    then set("ecoli_growth_rate", get_signal(oxy))
    else set("ecoli_growth_rate", get_signal(f)/5)
  end;

// Commensalism: the cell emits a signal that degrades the waste products 
// of another bacterium, allowing it to feed on them.
fun comensalism bacteria .
  if bacteria > 0.15
    then emit_signal(com,bacteria)
    else emit_signal(com,0)
  end;

// Resistance: the cell enters a state of latency in which it stops its growth,
// waiting for better conditions to grow.
fun resistance condition .
  if condition < 0.05
    then set("ecoli_growth_rate",0)
    else set("ecoli_growth_rate", get_signal(f)/5)
  end;

//Artificial neural network program
//
// gfp: Bacteria receiving arabinose as the carbon source signal.
// rfp: Bacteria receiving self-inducing molecule-2 (AI-2) 
//      in the quorum sensing system used by E.coli.
// yfP: Bacteria receiving galactose as a chemotactic signal.
// cfp: Bacteria receiving oxygen. 

program ANN() :={
  s:=[e:=environment ,score:=0.0,c:=behavior];
  gfp:=0;
  rfp:=0;
  yfp:=0;
  cfp:=0;
  
  t:=0;
  rep:=0;
  count:=0;
  m1:=0;
  m2:=0;
  Y:={};
  movility:= [ num := 0, mean := 0, std := 0 ];

  true:{ t:= t+dt,
         rep:= rep+dt,
	 count:=count+dt,
	 emit_signal(e,1),
	 emit_signal(bac,get_signal(f)),
	 set_signal(oxy,rand(400)-100,rand(500)-250, 0) //Controlling the amount of oxygen 
       }
       
  t > 0.25 : { t := 0, m1:=m2, m2:= get_signal(d)}

// s.e[0]: bacterium detects galactose; s.e[1]: bacterium detects oxygen;
// s.e[2]: bacterium detects AI-2;      s.e[3]: bacterium detects arabinose;
//
// s.c[0]: oxygen response;   s.c[1]: motility response (chemotaxis);
// s.c[2]: commensalism;      s.c[3]: stress response (resistance);  

  rep >= 0.5 :{ s.e[0]:=detect(get_signal(d)),
                s.e[1]:=detect(get_signal(oxy)),
              	s.e[2]:=detect(get_signal(bac)),
              	s.e[3]:=detect(get_signal(f)),
	        	s.c[0] :=relu((s.e[0]*w_1[0])+(s.e[1]*w_1[1])+(s.e[2]*w_1[2])+(s.e[3]*w_1[3])),
	        	s.c[1] :=relu((s.e[0]*w_2[0])+(s.e[1]*w_2[1])+(s.e[2]*w_2[2])+(s.e[3]*w_2[3])),
	        	s.c[2] :=relu((s.e[0]*w_3[0])+(s.e[1]*w_3[1])+(s.e[2]*w_3[2])+(s.e[3]*w_3[3])),
	        	s.c[3] :=relu((s.e[0]*w_4[0])+(s.e[1]*w_4[1])+(s.e[2]*w_4[2])+(s.e[3]*w_4[3])),
	        	rep := 0
               }

  //daughter :  { fprint (fp, s.e,",",s.c,"\n" ) }

// Bacterial behavior table
//
  s.e[0]=0 & s.e[1]=0 & s.e[2]=0 & s.e[3]=0 :{s.c[3]:=1}

  s.c[0]=0 & s.c[1]=1 & s.c[2]=1 & s.c[3]=1 : { colonization m1 m2,
						comensalism (get_signal(bac)),
						resistance (get_signal(f)),
						set("ecoli_growth_rate",get_signal(f_c)/5),
						gfp:=0,
						yfp:=m2*1000,
						rfp:=get_signal(f_c)*1000,
						cfp:=0
              				      }

  s.c[0]=0 & s.c[1]=0 & s.c[2]=1 & s.c[3]=1 : {comensalism (get_signal(bac)),
  	     	       	       resistance (get_signal(bac)),
					       set("ecoli_growth_rate",get_signal(f_c)/5),
					       rfp:=get_signal(f_c)*1000,
					       yfp:=0,
					       gfp:=0,
					       cfp:=0
					      }
							 
  s.c[0]=0 & s.c[1]=1 & s.c[2]=0 & s.c[3]=1 : {colonization m1 m2,
    	      	   	       resistance (get_signal(f)),
					       yfp:=m2*1000,
					       rfp:=0,
					       cfp:=0,
					       gfp:=0
	      				      }
					      
  s.c[0]=0 & s.c[1]=0 & s.c[2]=0 & s.c[3]=0 : {set("ecoli_growth_rate",(get_signal(f)/5)),
					       gfp:=get_signal(f)*1000,
					       rfp:=0,
					       cfp:=0,
					       yfp:=0
					      }			      

  s.c[0]=0 & s.c[1]=0 & s.c[2]=0 & s.c[3]=1 : {resistance (get_signal(f)),
  	     	      	       rfp:=get_signal(f_c)*1000,
					       cfp:=0,
					       gfp:=0,
					      }
					      
  s.c[0]=1 & s.c[1]=0 & s.c[2]=0 & s.c[3]=1 : {diferentiation (get_signal(oxy)),
  	     	 	   	       emit_signal(response,1),
  	     	 	   	       resistance (get_signal(f)),
  	     	 	   	       cfp:=get_signal(oxy)*1000,
					       gfp:=0,
					       rfp:=0
					      }

  s.c[0]=1 & s.c[1]=1 & s.c[2]=0 & s.c[3]=1 : {diferentiation (get_signal(oxy)),
  	     	 	   	       emit_signal(response,1),
  	     	 	   	       colonization m1 m2,
					       resistance (get_signal(f)),
					       cfp:=get_signal(oxy)*1000,
					       yfp:=m2,
					       rfp:=0,
					       gfp:=0
					       }
					       
  s.c[0]=1 & s.c[1]=1 & s.c[2]=1 & s.c[3]=1 : {diferentiation (get_signal(oxy)),
   	     		   	       emit_signal(response,1),
  	     		   	       colonization m1 m2,
					       resistance (get_signal(f)),
					       comensalism (get_signal(bac)),
					       set("ecoli_growth_rate",get_signal(f_c)/5),
					       cfp:=get_signal(oxy)*1000,
					       yfp:=m2*1000,
					       rfp:=get_signal(f_c)*1000,
					       gfp:=0
					      }

  s.c[0]=1 & s.c[1]=0 & s.c[2]=0 & s.c[3]=0 : {diferentiation (get_signal(oxy)),
  	     	       	       emit_signal(response,1),
					       cfp:=get_signal(oxy)*200,
					       rfp:=0,
					       gfp:=get_signal(f)*1000,
					       yfp:=0
					      }
					      
  s.c[0]=1 & s.c[1]=0 & s.c[2]=1 & s.c[3]=1 : {diferentiation (get_signal(oxy)),
  	     	  	   	       emit_signal(response,1),
					       resistance (get_signal(f)),
					       comensalism (get_signal(bac)),
					       set("ecoli_growth_rate",get_signal(f_c)/5),
					       cfp:=get_signal(oxy)*1000,      
					       rfp:=get_signal(f_c),
					       gfp:=0,
					       yfp:=0
					      }
					      
  selected  : {print(s.e," ",s.c," ",get_signal(oxy))}

  foreach i in range 1200 do {
    set_signal(bio,rand(150)-200,(rand(500)-250),5),
    set_signal(d,rand(150)-200,(rand(500)-250),5)
  }end;
  
};

program main() := {
  count:=0;
  total:=0;
  Y:={};
  movility:= [ num := 0, mean := 0, std := 0 ];
  B:={};
  aerobic:= [ num := 0, mean := 0, std := 0 ];
  R:={};
  resilient:= [ num := 0, mean := 0, std := 0 ];
  G:={};
  food_available:= [ num := 0, mean := 0, std := 0 ];
 
  true : { count := count + dt,
       	   total := total + dt
	 }

  total = dt : {ecoli ([x:=-235, y:=5], program ANN())}
  
  count >= 1 : {Y:= maptocells yfp/volume end, // "end" to say its the end of the function call
       	         movility := data Y , // Y contains the value of yfp/volume of each cell, so risk3.num is the whole number of cells, risk3.mean is the mean of yellow across all cells etc
		 B:= maptocells cfp/volume end,
       	         aerobic := data B ,
		 R:= maptocells rfp/volume end,
       	         resilient := data R ,
		 G:= maptocells gfp/volume end,
       	         food_available := data G ,
			 print("movility num = ",movility.num," mean movility = ",movility.mean," mean aerobic = ",aerobic.mean," mean resilient = ",resilient.mean," mean available food = ",food_available.mean),
	         fprint (fp,movility.num,",",movility.mean,",",aerobic.mean,",",resilient.mean,",",food_available.mean,"\n" ),
		 count:=0
	       }
  total>=45.1 :{exit()}
};



     